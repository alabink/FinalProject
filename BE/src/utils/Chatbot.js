const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config();
const mongoose = require('mongoose'); // Added missing import

const genAI = new GoogleGenerativeAI(process.env.API_KEY_GEMINI);
const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });

const modelProduct = require('../models/products.model');
const modelCategory = require('../models/category.model');

// Cloudinary configuration
const CLOUDINARY_BASE_URL = 'https://res.cloudinary.com/dgliyvuvy/image/upload';
const DEFAULT_IMAGE = `${CLOUDINARY_BASE_URL}/v1712345678/phone_shop/default-product.webp`;

const chatHistory = new Map();
const userContext = new Map();

// Helper function to get image URL
function getImageUrl(imagePath) {
  if (
    !imagePath ||
    imagePath.includes('placeholder-product.jpg') ||
    imagePath.startsWith('/')
  ) {
    return DEFAULT_IMAGE;
  }

  if (imagePath.startsWith('http')) return imagePath;
  return `${CLOUDINARY_BASE_URL}/${imagePath}`;
}

// ‚úÖ FIXED: H√†m truy v·∫•n s·∫£n ph·∫©m ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a ho√†n to√†n
async function getRelevantProducts(query, limit = 10) {
    try {
        // B∆∞·ªõc 1: Ph√¢n t√≠ch v√† l√†m s·∫°ch query
        const cleanQuery = query.toLowerCase()
            .replace(/[^\w\s\u00C0-\u024F\u1E00-\u1EFF]/g, ' ') // Gi·ªØ l·∫°i k√Ω t·ª± ti·∫øng Vi·ªát
            .replace(/\s+/g, ' ')
            .trim();

        console.log('üîç Original query:', query);
        console.log('üßπ Cleaned query:', cleanQuery);

        if (!cleanQuery || cleanQuery.length < 2) {
            // Tr·∫£ v·ªÅ s·∫£n ph·∫©m m·ªõi nh·∫•t n·∫øu query r·ªóng
            const products = await modelProduct
                .find({})
                .populate('category')
                .sort({ createdAt: -1 })
                .limit(limit)
                .lean();
            
            console.log('üì¶ Fallback products count:', products.length);
            return products.map(product => formatProduct(product));
        }

        // B∆∞·ªõc 2: T√¨m ki·∫øm ƒë∆°n gi·∫£n v√† hi·ªáu qu·∫£
        const searchConditions = [
            { name: { $regex: cleanQuery, $options: 'i' } },
            { brand: { $regex: cleanQuery, $options: 'i' } },
            { description: { $regex: cleanQuery, $options: 'i' } }
        ];

        // T√¨m ki·∫øm v·ªõi OR condition
        let products = await modelProduct
            .find({ $or: searchConditions })
            .populate('category')
            .sort({ createdAt: -1 })
            .limit(limit)
            .lean();

        console.log('üìä Found products:', products.length);

        // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m t·ª´ng t·ª´ ri√™ng l·∫ª
        if (products.length === 0) {
            const words = cleanQuery.split(' ').filter(word => word.length > 2);
            console.log('üîÑ Trying individual words:', words);
            
            for (const word of words) {
                const wordProducts = await modelProduct
                    .find({
                        $or: [
                            { name: { $regex: word, $options: 'i' } },
                            { brand: { $regex: word, $options: 'i' } }
                        ]
                    })
                    .populate('category')
                    .sort({ createdAt: -1 })
                    .limit(limit)
                    .lean();
                
                if (wordProducts.length > 0) {
                    products = wordProducts;
                    console.log('‚úÖ Found products with word:', word, 'count:', products.length);
                    break;
                }
            }
        }

        // N·∫øu v·∫´n kh√¥ng c√≥, tr·∫£ v·ªÅ s·∫£n ph·∫©m m·ªõi nh·∫•t
        if (products.length === 0) {
            console.log('‚ö†Ô∏è No products found, returning latest products...');
            products = await modelProduct
                .find({})
                .populate('category')
                .sort({ createdAt: -1 })
                .limit(limit)
                .lean();
        }

        return products.map(product => formatProduct(product));

    } catch (error) {
        console.error('‚ùå Error in getRelevantProducts:', error);
        
        // Ultimate fallback
        try {
            const fallbackProducts = await modelProduct
                .find({})
                .populate('category')
                .limit(limit)
                .lean();
            
            console.log('üÜò Ultimate fallback returned:', fallbackProducts.length, 'products');
            return fallbackProducts.map(product => formatProduct(product));
        } catch (fallbackError) {
            console.error('üíÄ Ultimate fallback failed:', fallbackError);
            return [];
        }
    }
}

// ‚úÖ Helper function ƒë·ªÉ format product data - C·∫¢I TI·∫æN
function formatProduct(product) {
    // X·ª≠ l√Ω variants ƒë·ªÉ l·∫•y th√¥ng tin m√†u s·∫Øc v√† b·ªô nh·ªõ
    let colors = [];
    let storages = [];
    let priceRange = { min: product.price || 0, max: product.price || 0 };
    
    if (product.variants && product.variants.length > 0) {
        // L·∫•y danh s√°ch m√†u s·∫Øc duy nh·∫•t
        const uniqueColors = new Map();
        product.variants.forEach(variant => {
            if (variant.color && variant.color.name) {
                uniqueColors.set(variant.color.name, variant.color);
            }
        });
        colors = Array.from(uniqueColors.values());
        
        // L·∫•y danh s√°ch b·ªô nh·ªõ duy nh·∫•t
        const uniqueStorages = new Set();
        product.variants.forEach(variant => {
            if (variant.storage && variant.storage.size) {
                uniqueStorages.add(variant.storage.size);
            }
        });
        storages = Array.from(uniqueStorages);
        
        // T√≠nh kho·∫£ng gi√°
        const prices = product.variants.map(v => v.priceDiscount || v.price).filter(p => p > 0);
        if (prices.length > 0) {
            priceRange.min = Math.min(...prices);
            priceRange.max = Math.max(...prices);
        }
    }

    return {
        id: product._id.toString(),
        name: product.name || '',
        brand: product.brand || '',
        price: product.price || 0,
        priceDiscount: product.priceDiscount || null,
        description: product.description || '',
        attributes: product.attributes || {},
        variants: product.variants || [],
        stock: product.stock || 0,
        rating: product.rating || 0,
        category: product.category ? {
            id: product.category._id?.toString() || product.category.toString(),
            name: product.category.nameCategory || product.category.name || '',
            description: product.category.description || ''
        } : null,
        images: product.images?.map(img => getImageUrl(img)) || [DEFAULT_IMAGE],
        slug: product.slug || product._id.toString(),
        // Th√™m th√¥ng tin variants ƒë√£ x·ª≠ l√Ω
        availableColors: colors.map(c => c.name),
        availableStorages: storages,
        priceRange: priceRange
    };
}

// ‚úÖ H√†m l·∫•y categories ƒë∆∞·ª£c t·ªëi ∆∞u
async function getCategories() {
    try {
        const categories = await modelCategory.find({}).lean();
        return categories.map(cat => ({
            id: cat._id.toString(),
            name: cat.nameCategory || cat.name || '',
            description: cat.description || ''
        }));
    } catch (error) {
        console.error('‚ùå Error getting categories:', error);
        return [];
    }
}

// ‚úÖ H√†m t√¨m ki·∫øm th√¥ng minh ƒë∆∞·ª£c c·∫£i ti·∫øn
async function smartProductSearch(query, limit = 8) {
    console.log('üéØ Smart product search for:', query, 'limit:', limit);
    
    const results = await getRelevantProducts(query, limit);
    
    console.log('‚úÖ Smart search results:', results.length);
    console.log('üìã Product names:', results.map(p => p.name));
    
    return results;
}

// Gi·ªØ nguy√™n c√°c h√†m c√≤n l·∫°i...
function analyzeQuestion(question) {
    const intents = {
        product_specific: {
            patterns: [
                /iphone|samsung|xiaomi|oppo|vivo|huawei|nokia|realme/i,
                /\d+\s*(gb|tb|pro|max|plus|mini)/i
            ],
            confidence: 0.9
        },
        variant_inquiry: {
            patterns: [
                /m√†u|color|colours/i,
                /phi√™n b·∫£n|version|variant/i,
                /b·ªô nh·ªõ|storage|gb|tb/i,
                /c√≥ m·∫•y m√†u|c√≥ nh·ªØng m√†u|m√†u n√†o|m√†u g√¨/i,
                /c√≥ m·∫•y phi√™n b·∫£n|phi√™n b·∫£n n√†o/i
            ],
            confidence: 0.9
        },
        price_inquiry: {
            patterns: [/gi√°|bao nhi√™u|cost|price|ti·ªÅn/i],
            confidence: 0.8
        },
        comparison: {
            patterns: [/so s√°nh|kh√°c|h∆°n|t·ªët h∆°n|n√™n ch·ªçn|vs|versus/i],
            confidence: 0.8
        },
        recommendation: {
            patterns: [/t∆∞ v·∫•n|g·ª£i √Ω|ƒë·ªÅ xu·∫•t|n√™n mua|ph√π h·ª£p|recommend/i],
            confidence: 0.7
        },
        technical_specs: {
            patterns: [/th√¥ng s·ªë|c·∫•u h√¨nh|ram|cpu|camera|pin|m√†n h√¨nh|storage/i],
            confidence: 0.8
        },
        availability: {
            patterns: [/c√≤n h√†ng|h·∫øt h√†ng|c√≥ s·∫µn|stock|available/i],
            confidence: 0.7
        },
        warranty: {
            patterns: [/b·∫£o h√†nh|warranty|guarantee|l·ªói|s·ª≠a ch·ªØa/i],
            confidence: 0.6
        },
        promotion: {
            patterns: [/khuy·∫øn m√£i|gi·∫£m gi√°|sale|promotion|∆∞u ƒë√£i|discount/i],
            confidence: 0.6
        },
        general_info: {
            patterns: [/c·ª≠a h√†ng|ƒë·ªãa ch·ªâ|li√™n h·ªá|hotline|store|contact/i],
            confidence: 0.5
        }
    };

    const results = [];
    for (const [intent, config] of Object.entries(intents)) {
        const matches = config.patterns.filter(pattern => pattern.test(question));
        if (matches.length > 0) {
            results.push({
                intent,
                confidence: config.confidence * (matches.length / config.patterns.length)
            });
        }
    }

    return results.sort((a, b) => b.confidence - a.confidence);
}

async function buildIntelligentContext(userId, question, dbData) {
    if (!userContext.has(userId)) {
        userContext.set(userId, {
            currentProducts: [],
            preferences: {},
            conversationFlow: [],
            lastIntent: null
        });
    }

    const context = userContext.get(userId);
    const intents = analyzeQuestion(question);
    
    if (intents.length > 0) {
        context.lastIntent = intents[0].intent;
    }

    // ‚úÖ C·∫¢I TI·∫æN: TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë·ªÉ c√≥ nhi·ªÅu l·ª±a ch·ªçn h∆°n
    const mentionedProducts = await smartProductSearch(question, 8);
    console.log("üîç Mentioned products found:", mentionedProducts.length);
    console.log("üìã Product names:", mentionedProducts.map(p => p.name));
    
    if (mentionedProducts.length > 0) {
        context.currentProducts = mentionedProducts;
    }

    // Ph√¢n t√≠ch preferences
    const priceMatch = question.match(/(\d+)\s*(tri·ªáu|tr|million)/i);
    if (priceMatch) {
        context.preferences.maxPrice = parseInt(priceMatch[1]) * 1000000;
    }

    const features = {
        camera: /camera|ch·ª•p ·∫£nh|photography|selfie/i,
        gaming: /game|gaming|fps|performance|hi·ªáu nƒÉng/i,
        battery: /pin|battery|d√πng l√¢u|th·ªùi l∆∞·ª£ng/i,
        screen: /m√†n h√¨nh|screen|display|xem phim/i,
        storage: /b·ªô nh·ªõ|storage|gb|tb/i
    };

    for (const [feature, pattern] of Object.entries(features)) {
        if (pattern.test(question)) {
            context.preferences[feature] = true;
        }
    }

    context.conversationFlow.push({
        question,
        intents,
        timestamp: new Date()
    });

    // Gi·ªõi h·∫°n conversation flow
    if (context.conversationFlow.length > 5) {
        context.conversationFlow.shift();
    }

    return context;
}

async function createIntelligentPrompt(question, context, relevantProducts, categories) {
    // ‚úÖ C·∫¢I TI·∫æN: Hi·ªÉn th·ªã th√¥ng tin s·∫£n ph·∫©m chi ti·∫øt h∆°n
    const productInfo = relevantProducts.map((product, index) => {
        let variantInfo = '';
        
        // Hi·ªÉn th·ªã th√¥ng tin m√†u s·∫Øc v√† b·ªô nh·ªõ t·ª´ variants ƒë√£ x·ª≠ l√Ω
        if (product.availableColors && product.availableColors.length > 0) {
            variantInfo += `\nM√†u s·∫Øc c√≥ s·∫µn: ${product.availableColors.join(', ')}`;
        }
        
        if (product.availableStorages && product.availableStorages.length > 0) {
            variantInfo += `\nPhi√™n b·∫£n b·ªô nh·ªõ: ${product.availableStorages.join(', ')}`;
        }
        
        if (product.priceRange && product.priceRange.min !== product.priceRange.max) {
            variantInfo += `\nKho·∫£ng gi√°: ${product.priceRange.min.toLocaleString('vi-VN')}ƒë - ${product.priceRange.max.toLocaleString('vi-VN')}ƒë`;
        }

        const attributesText = Object.entries(product.attributes || {})
            .map(([k, v]) => `${k}: ${v}`)
            .join(', ');

        return `
[S·∫¢N PH·∫®M ${index + 1}]
ID: ${product.id}
T√™n: ${product.name}
Brand: ${product.brand}
Gi√°: ${product.price?.toLocaleString('vi-VN') || 'N/A'}ƒë${product.priceDiscount ? ` (Gi·∫£m gi√°: ${product.priceDiscount.toLocaleString('vi-VN')}ƒë)` : ''}
M√¥ t·∫£: ${product.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
Th√¥ng s·ªë k·ªπ thu·∫≠t: ${attributesText || 'Kh√¥ng c√≥ th√¥ng s·ªë'}${variantInfo}
S·ªë l∆∞·ª£ng t·ªìn kho: ${product.stock || 0}
ƒê√°nh gi√°: ${product.rating || 0}/5
Danh m·ª•c: ${product.category?.name || 'Kh√¥ng x√°c ƒë·ªãnh'}
·∫¢nh: ${product.images?.[0] || DEFAULT_IMAGE}
Slug: ${product.slug}
`;
    }).join('\n---\n');

    const categoryInfo = categories.map(cat => `
Danh m·ª•c: ${cat.name}
M√¥ t·∫£: ${cat.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
`).join('\n');

    const contextInfo = `
S·∫£n ph·∫©m ƒëang quan t√¢m: ${context.currentProducts.map(p => p.name).join(', ') || 'Ch∆∞a c√≥'}
Intent cu·ªëi c√πng: ${context.lastIntent || 'Ch∆∞a x√°c ƒë·ªãnh'}
Preferences: ${Object.entries(context.preferences).filter(([k, v]) => v).map(([k, v]) => k).join(', ') || 'Ch∆∞a c√≥'}
L·ªãch s·ª≠ h·ªôi tho·∫°i: ${context.conversationFlow.slice(-3).map(f => f.question).join(' -> ')}
`;

    return `
B·∫°n l√† m·ªôt AI tr·ª£ l√Ω th√¥ng minh c·ªßa c·ª≠a h√†ng ƒëi·ªán tho·∫°i. Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi m·ªçi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch ch√≠nh x√°c v√† ph√π h·ª£p.

TH√îNG TIN C·ª¨A H√ÄNG:
DANH S√ÅCH S·∫¢N PH·∫®M (${relevantProducts.length} s·∫£n ph·∫©m ƒë∆∞·ª£c t√¨m th·∫•y):
${productInfo}

DANH M·ª§C S·∫¢N PH·∫®M:
${categoryInfo}

CONTEXT CU·ªòC TR√í CHUY·ªÜN:
${contextInfo}

C√ÇU H·ªéI KH√ÅCH H√ÄNG:
"${question}"

QUY T·∫ÆC TR·∫¢ L·ªúI QUAN TR·ªåNG:

1. PH√ÇN T√çCH C√ÇU H·ªéI TR∆Ø·ªöC KHI TR·∫¢ L·ªúI:
   - N·∫øu c√¢u h·ªèi KH√îNG li√™n quan ƒë·∫øn s·∫£n ph·∫©m ƒëi·ªán tho·∫°i (v√≠ d·ª•: ch√†o h·ªèi, h·ªèi th·ªùi ti·∫øt, c√¢u h·ªèi chung): KH√îNG ƒë·ªÅ c·∫≠p ƒë·∫øn s·∫£n ph·∫©m n√†o
   - N·∫øu c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn s·∫£n ph·∫©m: Ti·∫øp t·ª•c b∆∞·ªõc 2

2. KI·ªÇM TRA S·∫¢N PH·∫®M TRONG C·ª¨A H√ÄNG:
   - T√¨m CH√çNH X√ÅC s·∫£n ph·∫©m ƒë∆∞·ª£c h·ªèi trong danh s√°ch tr√™n
   - N·∫øu KH√îNG T√åM TH·∫§Y s·∫£n ph·∫©m: Tr·∫£ l·ªùi "Xin l·ªói, hi·ªán t·∫°i c·ª≠a h√†ng ch√∫ng t√¥i kh√¥ng c√≥ s·∫£n ph·∫©m [t√™n s·∫£n ph·∫©m] m√† b·∫°n ƒëang t√¨m ki·∫øm"
   - N·∫øu T√åM TH·∫§Y s·∫£n ph·∫©m: Tr·∫£ l·ªùi th√¥ng tin chi ti·∫øt

3. C√ÅC LO·∫†I C√ÇU H·ªéI V√Ä C√ÅCH X·ª¨ L√ù:
   - Ch√†o h·ªèi/c·∫£m ∆°n: Tr·∫£ l·ªùi l·ªãch s·ª±, kh√¥ng ƒë·ªÅ c·∫≠p s·∫£n ph·∫©m
   - H·ªèi v·ªÅ gi·ªù m·ªü c·ª≠a/ƒë·ªãa ch·ªâ: Tr·∫£ l·ªùi th√¥ng tin c·ª≠a h√†ng
   - H·ªèi s·∫£n ph·∫©m c·ª• th·ªÉ: Ki·ªÉm tra c√≥ trong danh s√°ch kh√¥ng
   - So s√°nh s·∫£n ph·∫©m: Ch·ªâ so s√°nh nh·ªØng s·∫£n ph·∫©m c√≥ trong c·ª≠a h√†ng
   - T∆∞ v·∫•n: Ch·ªâ ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m c√≥ trong danh s√°ch
   - H·ªéI V·ªÄ M√ÄU S·∫ÆC/PHI√äN B·∫¢N: Tr·∫£ l·ªùi d·∫°ng TEXT th√¥ng th∆∞·ªùng, KH√îNG d√πng JSON format

4. Y√äU C·∫¶U ƒê·ªäNH D·∫†NG:
   - TUY·ªÜT ƒê·ªêI KH√îNG s·ª≠ d·ª•ng c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát nh∆∞ **, ##, --, ==
   - Kh√¥ng s·ª≠ d·ª•ng in hoa ƒë·ªÉ nh·∫•n m·∫°nh
   - Tr·∫£ l·ªùi ng·∫Øn g·ªçn, r√µ r√†ng, d·ªÖ hi·ªÉu
   - S·ª≠ d·ª•ng emoji ph√π h·ª£p
   - Kh√¥ng ƒë·ªÅ c·∫≠p ƒë·∫øn t·ª´ "database"

5. KHI TR·∫¢ L·ªúI V·ªÄ S·∫¢N PH·∫®M:
   - QUAN TR·ªåNG: N·∫øu c√¢u h·ªèi v·ªÅ M√ÄU S·∫ÆC, PHI√äN B·∫¢N, B·ªò NH·ªö c·ªßa s·∫£n ph·∫©m:
     * Tr·∫£ l·ªùi d·∫°ng TEXT th√¥ng th∆∞·ªùng
     * Li·ªát k√™ ƒë·∫ßy ƒë·ªß c√°c m√†u s·∫Øc v√† phi√™n b·∫£n c√≥ s·∫µn t·ª´ th√¥ng tin trong danh s√°ch
     * Kh√¥ng s·ª≠ d·ª•ng JSON format
     * Kh√¥ng hi·ªÉn th·ªã ·∫£nh hay link s·∫£n ph·∫©m
   
   - N·∫øu c√¢u h·ªèi v·ªÅ GI·ªöI THI·ªÜU s·∫£n ph·∫©m c·ª• th·ªÉ, h√£y tr·∫£ l·ªùi v·ªõi format JSON ƒë·∫∑c bi·ªát:
   {
     "type": "product_info",
     "message": "Th√¥ng tin s·∫£n ph·∫©m...",
     "products": [
       {
         "id": "product_id",
         "name": "T√™n s·∫£n ph·∫©m",
         "price": 1000000,
         "priceDiscount": 900000,
         "image": "ƒë∆∞·ªùng_d·∫´n_·∫£nh",
         "slug": "product_slug"
       }
     ]
   }
   
   - N·∫øu kh√¥ng c√≥ s·∫£n ph·∫©m c·ª• th·ªÉ, tr·∫£ l·ªùi b√¨nh th∆∞·ªùng

V√ç D·ª§ C·ª§ TH·ªÇ:

C√¢u h·ªèi: "Xin ch√†o"
Tr·∫£ l·ªùi: "Xin ch√†o! Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi c·ª≠a h√†ng ƒëi·ªán tho·∫°i c·ªßa ch√∫ng t√¥i. T√¥i c√≥ th·ªÉ h·ªó tr·ª£ g√¨ cho b·∫°n h√¥m nay? üòä"

C√¢u h·ªèi: "iPhone 15 Pro Max gi√° bao nhi√™u?"
- N·∫øu c√≥ trong danh s√°ch: Tr·∫£ l·ªùi v·ªõi JSON format nh∆∞ tr√™n
- N·∫øu kh√¥ng c√≥: "Xin l·ªói, hi·ªán t·∫°i c·ª≠a h√†ng ch√∫ng t√¥i kh√¥ng c√≥ s·∫£n ph·∫©m iPhone 15 Pro Max m√† b·∫°n ƒëang t√¨m ki·∫øm."

C√¢u h·ªèi: "iPhone 15 Pro c√≥ m·∫•y m√†u?"
Tr·∫£ l·ªùi: "iPhone 15 Pro hi·ªán c√≥ c√°c m√†u: Titan T·ª± Nhi√™n, Titan Xanh, Titan Tr·∫Øng, Titan ƒêen. S·∫£n ph·∫©m c√≥ c√°c phi√™n b·∫£n b·ªô nh·ªõ: 128GB, 256GB, 512GB, 1TB v·ªõi m·ª©c gi√° t·ª´ 28.990.000ƒë ƒë·∫øn 43.990.000ƒë t√πy theo phi√™n b·∫£n b·∫°n ch·ªçn."

C√¢u h·ªèi: "H√¥m nay th·ªùi ti·∫øt th·∫ø n√†o?"
Tr·∫£ l·ªùi: "T√¥i l√† tr·ª£ l√Ω c·ªßa c·ª≠a h√†ng ƒëi·ªán tho·∫°i n√™n kh√¥ng th·ªÉ cung c·∫•p th√¥ng tin th·ªùi ti·∫øt. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ c√°c s·∫£n ph·∫©m ƒëi·ªán tho·∫°i kh√¥ng? üòä"

H√£y √°p d·ª•ng c√°c quy t·∫Øc tr√™n ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch ch√≠nh x√°c!
`;
}

// ‚úÖ H√†m x·ª≠ l√Ω c√¢u h·ªèi ch√≠nh - C·∫¢I TI·∫æN
async function askQuestion(question, userId = 'guest') {
    try {
        console.log('üé§ Processing question:', question, 'for user:', userId);
        
        // Ki·ªÉm tra k·∫øt n·ªëi database tr∆∞·ªõc
        if (mongoose.connection.readyState !== 1) {
            console.warn('‚ö†Ô∏è Database not connected, attempting to connect...');
            try {
                await mongoose.connect(process.env.CONNECT_DB || 'mongodb://localhost:27017/techify', {
                    useNewUrlParser: true,
                    useUnifiedTopology: true,
                    serverSelectionTimeoutMS: 5000
                });
                console.log('‚úÖ Database connected successfully');
            } catch (dbError) {
                console.error('‚ùå Database connection failed:', dbError.message);
                return 'Xin l·ªói, hi·ªán t·∫°i h·ªá th·ªëng ƒëang g·∫∑p s·ª± c·ªë k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i sau.';
            }
        }
        
        // T·ªëi ∆∞u h√≥a: TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m ƒë·ªÉ c√≥ k·∫øt qu·∫£ t·ªët h∆°n
        const [relevantProducts, categories] = await Promise.all([
            getRelevantProducts(question, 10), // TƒÉng t·ª´ 5 l√™n 10
            getCategories()
        ]);
        
        console.log('üì¶ Retrieved products:', relevantProducts.length);
        console.log('üè∑Ô∏è Retrieved categories:', categories.length);
        
        const context = await buildIntelligentContext(userId, question, { products: relevantProducts, categories });
        const prompt = await createIntelligentPrompt(question, context, relevantProducts, categories);
        
        const result = await model.generateContent(prompt);
        const answer = result.response.text();

        // Parse JSON response if exists
        let parsedAnswer;
        try {
            const jsonMatch = answer.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                parsedAnswer = JSON.parse(jsonMatch[0]);

                // ‚úÖ G·∫Øn l·∫°i ·∫£nh ƒë√∫ng t·ª´ DB n·∫øu c√≥
                if (parsedAnswer.products) {
                    parsedAnswer.products = parsedAnswer.products.map(product => {
                        const matched = relevantProducts.find(p =>
                            p.id === product.id || p.slug === product.slug
                        );

                        return {
                            ...product,
                            image: matched?.images?.[0] || DEFAULT_IMAGE
                        };
                    });
                }
            }
        } catch (e) {
            console.error('‚ùå Error parsing JSON response:', e);
        }

        // Save chat history
        if (!chatHistory.has(userId)) {
            chatHistory.set(userId, []);
        }
        
        const historyEntry = {
            question,
            answer: parsedAnswer || answer,
            timestamp: new Date(),
            productsFound: relevantProducts.length,
            productNames: relevantProducts.map(p => p.name)
        };
        
        chatHistory.get(userId).push(historyEntry);
        
        // Gi·ªõi h·∫°n l·ªãch s·ª≠ chat
        const userHistory = chatHistory.get(userId);
        if (userHistory.length > 10) {
            userHistory.shift();
        }

        console.log('‚úÖ Question processed successfully');
        console.log('üìä Final answer type:', parsedAnswer ? 'JSON' : 'TEXT');
        
        return parsedAnswer || answer;
    } catch (error) {
        console.error('‚ùå Critical error in askQuestion:', error);
        return 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω c√¢u h·ªèi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.';
    }
}

// ‚úÖ TH√äM: H√†m debug ƒë·ªÉ ki·ªÉm tra k·∫øt qu·∫£ t√¨m ki·∫øm
async function debugSearch(query) {
    try {
        console.log('üêõ DEBUG: Testing search for:', query);
        
        const results = await getRelevantProducts(query, 5);
        
        console.log('üêõ DEBUG Results:');
        console.log('üìä Total found:', results.length);
        
        results.forEach((product, index) => {
            console.log(`üêõ Product ${index + 1}:`, {
                id: product.id,
                name: product.name,
                brand: product.brand,
                price: product.price,
                category: product.category?.name
            });
        });
        
        return results;
    } catch (error) {
        console.error('üêõ DEBUG Error:', error);
        return [];
    }
}

// ‚úÖ TH√äM: H√†m ki·ªÉm tra s·ª©c kh·ªèe c·ªßa database
async function healthCheck() {
    try {
        console.log('üè• Running health check...');
        
        const [productCount, categoryCount] = await Promise.all([
            modelProduct.countDocuments({}),
            modelCategory.countDocuments({})
        ]);
        
        console.log('üìä Database Status:');
        console.log('üì± Total products:', productCount);
        console.log('üè∑Ô∏è Total categories:', categoryCount);
        
        if (productCount === 0) {
            console.warn('‚ö†Ô∏è WARNING: No products found in database!');
        }
        
        if (categoryCount === 0) {
            console.warn('‚ö†Ô∏è WARNING: No categories found in database!');
        }
        
        // Test m·ªôt v√†i truy v·∫•n m·∫´u
        const testQueries = ['iphone', 'samsung', 'ƒëi·ªán tho·∫°i'];
        
        for (const query of testQueries) {
            const results = await getRelevantProducts(query, 3);
            console.log(`üîç Test query "${query}": ${results.length} results`);
        }
        
        return {
            status: 'healthy',
            productCount,
            categoryCount,
            timestamp: new Date()
        };
    } catch (error) {
        console.error('üè• Health check failed:', error);
        return {
            status: 'unhealthy',
            error: error.message,
            timestamp: new Date()
        };
    }
}

module.exports = { 
    askQuestion,
    debugSearch,
    healthCheck,
    getRelevantProducts,
    smartProductSearch
};