import React, { useState, useRef, useEffect } from 'react';
import styles from './Chatbot.module.scss';
import { requestAskQuestion } from '../Config/request';
import {
    RobotOutlined,
    CloseOutlined,
    SendOutlined,
    UserOutlined,
    ThunderboltOutlined,
    ShoppingCartOutlined,
    EyeOutlined
} from '@ant-design/icons';
import { motion, AnimatePresence } from 'framer-motion';
import { useStore } from '../hooks/useStore';
import { useNavigate } from 'react-router-dom';

const Chatbot = () => {
    const { dataUser } = useStore();
    const navigate = useNavigate();
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState(() => {
        // Kh√¥i ph·ª•c l·ªãch s·ª≠ chat t·ª´ localStorage n·∫øu c√≥
        const savedMessages = localStorage.getItem(`chat_history_${dataUser?._id}`);
        return savedMessages ? JSON.parse(savedMessages) : [
            {
                text: 'Xin ch√†o! T√¥i l√† TechifyAI - tr·ª£ l√Ω th√¥ng minh c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm s·∫£n ph·∫©m, t∆∞ v·∫•n c√¥ng ngh·ªá v√† h·ªó tr·ª£ mua s·∫Øm. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay? üöÄ',
                sender: 'bot',
                timestamp: new Date().toISOString()
            },
        ];
    });
    const [inputMessage, setInputMessage] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const messagesEndRef = useRef(null);

    // L∆∞u l·ªãch s·ª≠ chat v√†o localStorage m·ªói khi c√≥ thay ƒë·ªïi
    useEffect(() => {
        if (dataUser?._id) {
            localStorage.setItem(`chat_history_${dataUser._id}`, JSON.stringify(messages));
        }
    }, [messages, dataUser?._id]);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (inputMessage.trim() && !isLoading) {
            const userMessage = inputMessage.trim();
            const timestamp = new Date().toISOString();

            setMessages((prev) => [...prev, {
                text: userMessage,
                sender: 'user',
                timestamp
            }]);
            setInputMessage('');
            setIsLoading(true);

            try {
                const response = await requestAskQuestion({
                    question: userMessage,
                    userId: dataUser?._id || 'guest' // G·ª≠i userId ƒë·ªÉ backend c√≥ th·ªÉ theo d√µi l·ªãch s·ª≠ chat
                });

                setMessages((prev) => [...prev, {
                    text: response,
                    sender: 'bot',
                    timestamp: new Date().toISOString()
                }]);
            } catch (error) {
                setMessages((prev) => [
                    ...prev,
                    {
                        text: 'ü§ñ Xin l·ªói, h·ªá th·ªëng TechifyAI t·∫°m th·ªùi g·∫∑p s·ª± c·ªë. Vui l√≤ng th·ª≠ l·∫°i sau nh√©!',
                        sender: 'bot',
                        timestamp: new Date().toISOString()
                    },
                ]);
            } finally {
                setIsLoading(false);
            }
        }
    };

    // X√≥a l·ªãch s·ª≠ chat
    const clearChatHistory = () => {
        setMessages([{
            text: 'Xin ch√†o! T√¥i l√† TechifyAI - tr·ª£ l√Ω th√¥ng minh c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m ki·∫øm s·∫£n ph·∫©m, t∆∞ v·∫•n c√¥ng ngh·ªá v√† h·ªó tr·ª£ mua s·∫Øm. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay? üöÄ',
            sender: 'bot',
            timestamp: new Date().toISOString()
        }]);
        if (dataUser?._id) {
            localStorage.removeItem(`chat_history_${dataUser._id}`);
        }
    };

    // H√†m render message content
    const renderMessageContent = (message) => {
        // Ki·ªÉm tra xem c√≥ ph·∫£i JSON response kh√¥ng
        if (typeof message.text === 'object' && message.text.type === 'product_info') {
            return (
                <div className={styles.productResponse}>
                    <div className={styles.productMessage}>
                        {message.text.message}
                    </div>
                    <div className={styles.productGrid}>
                        {message.text.products.map((product, index) => (
                            <motion.div
                                key={product.id}
                                className={styles.productCard}
                                initial={{ opacity: 0, y: 20 }}
                                animate={{ opacity: 1, y: 0 }}
                                transition={{ delay: index * 0.1 }}
                                whileHover={{ scale: 1.02 }}
                            >
                                <div className={styles.productImage}>
                                    <img
                                        src={product.image}
                                        alt={product.name}
                                        onError={(e) => {
                                            e.target.src = '/placeholder-product.jpg';
                                        }}
                                    />
                                </div>

                                <div className={styles.productInfo}>
                                    <h4 className={styles.productName}>{product.name}</h4>
                                    <div className={styles.productPrice}>
                                        {product.priceDiscount ? (
                                            <>
                                                <span className={styles.discountPrice}>
                                                    {product.priceDiscount.toLocaleString('vi-VN')}ƒë
                                                </span>
                                                <span className={styles.originalPrice}>
                                                    {product.price.toLocaleString('vi-VN')}ƒë
                                                </span>
                                            </>
                                        ) : (
                                            <span className={styles.price}>
                                                {product.price.toLocaleString('vi-VN')}ƒë
                                            </span>
                                        )}
                                    </div>
                                    <div className={styles.productActions}>
                                        <button
                                            className={styles.viewButton}
                                            onClick={() => {
                                                navigate(`/product/${product.slug}`);
                                                setIsOpen(false);
                                            }}
                                        >
                                            <EyeOutlined /> Xem chi ti·∫øt
                                        </button>
                                        {/* <button
                                            className={styles.cartButton}
                                            onClick={() => {
                                                // Th√™m v√†o gi·ªè h√†ng logic ·ªü ƒë√¢y
                                                console.log('Add to cart:', product.id);
                                            }}
                                        >
                                            <ShoppingCartOutlined /> Th√™m v√†o gi·ªè
                                        </button> */}
                                    </div>
                                </div>
                            </motion.div>
                        ))}
                    </div>
                </div>
            );
        }

        // Render text b√¨nh th∆∞·ªùng
        return <div className={styles.messageText}>{message.text}</div>;
    };

    return (
        <>
            <motion.button
                className={styles.chatButton}
                onClick={() => setIsOpen(!isOpen)}
                aria-label={isOpen ? "ƒê√≥ng TechifyAI" : "M·ªü TechifyAI"}
                whileHover={{ scale: 1.1, rotate: 5 }}
                whileTap={{ scale: 0.95 }}
                animate={{
                    boxShadow: [
                        "0 0 20px rgba(102, 126, 234, 0.3)",
                        "0 0 30px rgba(102, 126, 234, 0.5)",
                        "0 0 20px rgba(102, 126, 234, 0.3)"
                    ]
                }}
                transition={{
                    boxShadow: { duration: 2, repeat: Infinity, ease: "easeInOut" }
                }}
            >
                <RobotOutlined className={styles.chatIcon} />
                <div className={styles.chatButtonGlow} />
            </motion.button>

            <AnimatePresence>
                {isOpen && (
                    <motion.div
                        className={styles.chatbotContainer}
                        initial={{ opacity: 0, y: 50, scale: 0.9 }}
                        animate={{ opacity: 1, y: 0, scale: 1 }}
                        exit={{ opacity: 0, y: 50, scale: 0.9 }}
                        transition={{ duration: 0.3, ease: [0.4, 0, 0.2, 1] }}
                    >
                        <div className={styles.chatHeader}>
                            <div className={styles.headerContent}>
                                <div className={styles.aiAvatar}>
                                    <RobotOutlined />
                                    <div className={styles.aiStatus} />
                                </div>
                                <div className={styles.headerInfo}>
                                    <h2>TechifyAI</h2>
                                    <span className={styles.subtitle}>
                                        <ThunderboltOutlined /> Tr·ª£ l√Ω th√¥ng minh
                                    </span>
                                </div>
                            </div>
                            <div className={styles.headerActions}>
                                <motion.button
                                    className={styles.clearButton}
                                    onClick={clearChatHistory}
                                    whileHover={{ scale: 1.1 }}
                                    whileTap={{ scale: 0.9 }}
                                    title="X√≥a l·ªãch s·ª≠ chat"
                                >
                                    <svg viewBox="0 0 24 24" width="16" height="16">
                                        <path fill="currentColor" d="M19 4h-3.5l-1-1h-5l-1 1H5v2h14M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12z" />
                                    </svg>
                                </motion.button>
                                <motion.button
                                    className={styles.closeButton}
                                    onClick={() => setIsOpen(false)}
                                    aria-label="ƒê√≥ng chat"
                                    whileHover={{ scale: 1.1, rotate: 90 }}
                                    whileTap={{ scale: 0.9 }}
                                >
                                    <CloseOutlined />
                                </motion.button>
                            </div>
                        </div>

                        <div className={styles.messageList}>
                            {messages.map((message, index) => (
                                <motion.div
                                    key={index}
                                    className={`${styles.message} ${message.sender === 'user' ? styles.userMessage : styles.botMessage
                                        }`}
                                    initial={{ opacity: 0, y: 20, scale: 0.9 }}
                                    animate={{ opacity: 1, y: 0, scale: 1 }}
                                    transition={{ duration: 0.3, delay: index * 0.1 }}
                                >
                                    <div className={styles.messageAvatar}>
                                        {message.sender === 'user' ? (
                                            dataUser?.avatar ? (
                                                <img
                                                    src={`http://localhost:3000/uploads/avatars/${dataUser.avatar}`}
                                                    alt={dataUser.fullName || 'User'}
                                                    className={styles.userAvatarImage}
                                                />
                                            ) : (
                                                <UserOutlined />
                                            )
                                        ) : (
                                            <RobotOutlined />
                                        )}
                                    </div>
                                    <div className={styles.messageContent}>
                                        {renderMessageContent(message)}
                                        <div className={styles.messageTime}>
                                            {message.sender === 'bot' ? 'TechifyAI' : (dataUser?.fullName || 'B·∫°n')} ‚Ä¢ {
                                                new Date(message.timestamp).toLocaleTimeString('vi-VN', {
                                                    hour: '2-digit',
                                                    minute: '2-digit',
                                                    day: '2-digit',
                                                    month: '2-digit'
                                                })
                                            }
                                        </div>
                                    </div>
                                </motion.div>
                            ))}
                            {isLoading && (
                                <motion.div
                                    className={`${styles.message} ${styles.botMessage}`}
                                    initial={{ opacity: 0, y: 20 }}
                                    animate={{ opacity: 1, y: 0 }}
                                >
                                    <div className={styles.messageAvatar}>
                                        <RobotOutlined />
                                    </div>
                                    <div className={styles.messageContent}>
                                        <div className={styles.typingIndicator}>
                                            <span></span>
                                            <span></span>
                                            <span></span>
                                        </div>
                                        <div className={styles.messageTime}>
                                            TechifyAI ƒëang so·∫°n tin...
                                        </div>
                                    </div>
                                </motion.div>
                            )}
                            <div ref={messagesEndRef} />
                        </div>

                        <form onSubmit={handleSubmit} className={styles.inputForm}>
                            <div className={styles.inputWrapper}>
                                <input
                                    type="text"
                                    value={inputMessage}
                                    onChange={(e) => setInputMessage(e.target.value)}
                                    placeholder="H·ªèi TechifyAI b·∫•t c·ª© ƒëi·ªÅu g√¨..."
                                    className={styles.input}
                                    disabled={isLoading}
                                />
                                <motion.button
                                    type="submit"
                                    className={styles.sendButton}
                                    disabled={isLoading || !inputMessage.trim()}
                                    whileHover={{ scale: 1.05 }}
                                    whileTap={{ scale: 0.95 }}
                                >
                                    <SendOutlined />
                                </motion.button>
                            </div>
                            <div className={styles.quickActions}>
                                <span className={styles.quickLabel}>G·ª£i √Ω:</span>
                                <button type="button" className={styles.quickAction} onClick={() => setInputMessage('T∆∞ v·∫•n ƒëi·ªán tho·∫°i ch∆°i game')}>
                                    üéÆ Gaming phone
                                </button>
                                <button type="button" className={styles.quickAction} onClick={() => setInputMessage('ƒêi·ªán tho·∫°i ch·ª•p ·∫£nh ƒë·∫πp')}>
                                    üì∏ Camera t·ªët
                                </button>
                                <button type="button" className={styles.quickAction} onClick={() => setInputMessage('So s√°nh c√°c ƒëi·ªán tho·∫°i')}>
                                    üîç So s√°nh
                                </button>
                            </div>
                        </form>
                    </motion.div>
                )}
            </AnimatePresence>
        </>
    );
};

export default Chatbot;
